# -*- coding: utf-8 -*-
"""Generador de frases tema 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z1WCe3aKcC8V-DBZOpIDzGbZx7wb-w1V

NOTAS:
"""

#Hacer un input con el numero de tema

#Realizar ejercicios con base en el número de tema
#ligar bloques de codigo?

#Primer generador de frases aleatorio. No distingue sujetos o tiempos
#import random
#Subject = ["I", "You", "He", "She", "It", "We", "You", "They"]
#Aux = ["do", "does", "did", "will", "am", "is", "are", "was", "were", "will be", "have", "has", "had", "will have", "have been", "has been", "had been", "will have been"]
#Verbs = ["run", "dance", "jump"]

#def generar_frase():
    #sujeto = random.choice(Subject)
    #auxiliar = random.choice(Aux)
    #verbo = random.choice(Verbs)
    #return sujeto, auxiliar, verbo

#print(generar_frase())

#Escoge tiempos gramaticales al azar
#Se sugiere intercambiar las palabras por valores.
Tiempos = ["present", "past", "future"]
Categorias = ["simple", "continuous", "perfect", "perfect continuous"]

def definir_tiempo_gramatical():
  tiempo = random.choice(Tiempos)
  categoria = random.choice(Categorias)
  return tiempo, categoria

print (definir_tiempo_gramatical())

#Escoge un pronombre y define el tipo de sujeto

#Listas
# tiempo_gram = ["PrS", "PaS", "FS", "PrC", "PaC", "FC", "PrP", "PaP", "FP", "PrPP", "PaPP", "FPP"]
# pronoun = ["I", "You", "He", "She", "It", "We", "You", "They"]

# #Definir parametros
# tiempo = random.choice(tiempo_gram)
# subject = random.choice(pronoun)


# #Escoger tipo de sujeto
# def definir_tipo_sujeto():
#   if subject in ["He", "She","It"]:
#     subject_type = "3PS"
#   else:
#     subject_type = "Not3PS"
#   return subject_type


# print (subject)
# print (definir_tipo_sujeto())
# print (tiempo)

#Escoge un pronombre y define el tipo de sujeto (TIEMPO Y CETGORIA POR SEPARADO)
import random
#Listas
tiempos = ["present", "past", "future"]
categorias = ["simple", "continuous", "perfect", "perfect continuous"]
pronouns = ["I", "You", "He", "She", "It", "We", "You", "They"]


#Definir parametros
tiempo = random.choice(tiempos)
categoria = random.choice(categorias)
subject = random.choice(pronouns)


#Escoger tipo de sujeto
def definir_tipo_sujeto():
  if subject in ["He", "She","It"]:
    subject_type = "3PS"
  else:
    subject_type = "Not3PS"
  return subject_type

tipo_sujeto = definir_tipo_sujeto()


print (subject)
print (tipo_sujeto)
print (tiempo)
print (categoria)

#NOTA!! Reemplazar valores en string por el valor especifico de la categoria, como aux
#Definir un auxiliar
auxiliares = ["___","do", "does", "did", "will", "am", "is", "are", "was", "were", "will be", "have", "has", "had", "will have", "have been", "has been", "had been", "will have been"]
def definir_aux():
  if tiempo in ["present", "past"] and categoria in ["simple"]:
    aux = auxiliares[0]
  elif tiempo in ["future"] and categoria in ["simple"]:
    aux = auxiliares[4]
  elif tiempo in ["present"] and categoria in ["continuous"] and subject in ["I"]:
    aux = auxiliares[5]
  elif tiempo in ["present"] and categoria in ["continuous"] and tipo_sujeto in ["3PS"]:
    aux = auxiliares[6]
  elif tiempo in ["present"] and categoria in ["continuous"] and tipo_sujeto in ["Not3PS"]:
     aux = auxiliares[7]
  elif tiempo in ["past"] and categoria in ["continuous"] and subject in ["I", "He", "She", "It"]:
    aux = auxiliares[8]
  elif tiempo in ["past"] and categoria in ["continuous"] and subject in ["You", "We", "They"]:
    aux = auxiliares[9]
  elif tiempo in ["future"] and categoria in ["continuous"]:
    aux = auxiliares[10]
  elif tiempo in ["present"] and categoria in ["perfect"] and tipo_sujeto in ["Not3PS"]:
    aux = auxiliares[11]
  elif tiempo in ["present"] and categoria in ["perfect"] and tipo_sujeto in ["3PS"]:
    aux = auxiliares[12]
  elif tiempo in ["past"] and categoria in ["perfect"]:
    aux = auxiliares[13]
  elif tiempo in ["future"] and categoria in ["perfect"]:
    aux = auxiliares[14]
  elif tiempo in ["present"] and categoria in ["perfect continuous"] and tipo_sujeto in ["Not3PS"]:
    aux = auxiliares[15]
  elif tiempo in ["present"] and categoria in ["perfect continuous"] and tipo_sujeto in ["3PS"]:
    aux = auxiliares[16]
  elif tiempo in ["past"] and categoria in ["perfect continuous"]:
    aux = auxiliares[17]
  elif tiempo in ["future"] and categoria in ["perfect continuous"]:
    aux = auxiliares[18]
  return aux
auxiliary = definir_aux()
print(auxiliary)

#Definir verbo

#Listas de verbos
regular_v = {
    "present": ["wash", "love", "work", "jump", "call"],
    "present 3PS": ["washes","loves", "works", "jumps", "calls" ],
    "past/perfect": ["washed", "loved", "worked", "jumped", "called"],
    "continuous": ["washing", "loving", "working", "jumping", "calling"]
}

#Escoger el verbo filtrando el sujetoy tiempo
def escoger_v_regular():
  if tiempo in ["present", "future"] and categoria in ["simple"] and tipo_sujeto in ["Not3PS"]:
    verbo = random.choice(regular_v["present"])
  elif tiempo in ["present"] and categoria in ["simple"] and tipo_sujeto in ["3PS"]:
    verbo = random.choice(regular_v["present 3PS"])
  elif tiempo in ["future"] and categoria in ["simple"] and tipo_sujeto in ["3PS"]:
    verbo = random.choice(regular_v["present"])
  elif tiempo in ["past"] and categoria in ["simple"]:
    verbo = random.choice(regular_v["past/perfect"])
  elif categoria in ["perfect"]:
    verbo = random.choice(regular_v["past/perfect"])
  elif categoria in ["continuous", "perfect continuous"]:
    verbo = random.choice(regular_v["continuous"])
  return verbo

verb = escoger_v_regular()
print(verb)

"""# Sección DEMOSNTRATIVES + NOUNS"""

import random
SINGULAR_DEMONSTRATIVES = "This", "That"
PLURAL_DEMONSTRATIVES = "These", "Those"
SINGULAR_NOUNS = "dog", "cat", "boy", "girl", "man", "woman"
PLURAL_NOUNS = "dogs", "cats", "boys", "girls", "men", "women"

def definir_demonstrative():
  chances = (1,2)
  plural_or_singular = random.choice(chances)
  if plural_or_singular == 1:
    demonstratives = random.choice(SINGULAR_DEMONSTRATIVES)
  else:
    demonstratives = random.choice(PLURAL_DEMONSTRATIVES)
  return demonstratives

demonstrative = definir_demonstrative()



def definir_sust():
  if demonstrative in ["This", "That"]:
    sust = random.choice(SINGULAR_NOUNS)
  elif demonstrative in ["These", "Those"]:
    sust = random.choice(PLURAL_NOUNS)
  return sust
noun = definir_sust()

print(demonstrative, noun)

class oracion:
  tiempo = random.choice(tiempos)
  categoria = random.choice(categorias)
  pronoun = random.choice(pronouns)

